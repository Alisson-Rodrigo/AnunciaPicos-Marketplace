@page "/chat"
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página de Chat</title>
    <style>
        /* CSS: Estilos para a aparência do chat (sem alterações) */
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .chat-container {
            width: 100%;
            max-width: 600px;
            height: 80vh;
            max-height: 700px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            background-color: #007bff;
            color: white;
            padding: 15px;
            font-size: 1.2em;
            text-align: center;
        }
        
        /* NOVO: Estilo para a área de status */
        .chat-status {
            padding: 10px 20px;
            background: #e9ecef;
            border-bottom: 1px solid #ddd;
            font-size: 0.9em;
            text-align: center;
            color: #495057;
        }
        .chat-status.error {
            background-color: #f8d7da;
            color: #721c24;
            font-weight: bold;
        }


        .chat-messages {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .message {
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 75%;
            word-wrap: break-word;
        }

        .message.sent {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }
        
        .message.error {
            background-color: #dc3545;
            color: white;
            align-self: center;
            font-size: 0.9em;
        }

        .chat-input-form {
            display: flex;
            border-top: 1px solid #ddd;
            padding: 10px;
            background-color: #f8f9fa;
        }

        .chat-input-form input {
            flex-grow: 1;
            border: 1px solid #ccc;
            border-radius: 20px;
            padding: 10px 15px;
            font-size: 1em;
            margin-right: 10px;
        }
        
        /* Desabilita o input e o botão se houver erro */
        .chat-input-form input:disabled, .chat-input-form button:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

        .chat-input-form button {
            border: none;
            background-color: #007bff;
            color: white;
            font-weight: bold;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .chat-input-form button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

    <div class="chat-container">
        <div class="chat-header">
            Chat Anuncia Picos
        </div>
        
        <div id="chatStatus" class="chat-status">
            Carregando informações da conversa...
        </div>
        
        <div class="chat-messages" id="chatMessages">
            </div>
        
        <form class="chat-input-form" id="messageForm">
            <input type="text" id="messageInput" placeholder="Digite sua mensagem..." autocomplete="off" required>
            <button type="submit">Enviar</button>
        </form>
    </div>

    <script>
        // JavaScript: Lógica atualizada para ser automática

        document.addEventListener('DOMContentLoaded', () => {

            // Seleciona os elementos do HTML
            const messageForm = document.getElementById('messageForm');
            const messageInput = document.getElementById('messageInput');
            const sendButton = messageForm.querySelector('button');
            const chatMessages = document.getElementById('chatMessages');
            const chatStatus = document.getElementById('chatStatus');

            let receiverId;
            let authToken;

            // --- INICIALIZAÇÃO AUTOMÁTICA ---
            function initializeChat() {
                // 1. Pega o ID do destinatário da URL
                const urlParams = new URLSearchParams(window.location.search);
                receiverId = urlParams.get('receiverId');

                // 2. Pega o token do localStorage
                authToken = localStorage.getItem("authToken");

                // 3. Valida se tudo foi encontrado
                if (!receiverId) {
                    chatStatus.textContent = "ERRO: O ID do destinatário não foi encontrado na URL.";
                    chatStatus.classList.add("error");
                    disableChat();
                    return;
                }
                
                if (!authToken) {
                    chatStatus.textContent = "ERRO: Token de autenticação não encontrado.";
                    chatStatus.classList.add("error");
                    disableChat();
                    return;
                }

                // Se tudo estiver OK, atualiza o status
                chatStatus.textContent = `Conversando com o usuário ID: ${receiverId}`;
            }

            function disableChat() {
                messageInput.disabled = true;
                sendButton.disabled = true;
                messageInput.placeholder = "Chat desabilitado por erro de configuração.";
            }

            // --- FUNÇÕES DO CHAT ---

            function addMessageToUI(text, type) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', type);
                messageElement.textContent = text;
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            async function enviarMensagem(receiverId, message, authToken) {
                // A URL da API do seu backend, não a URL do frontend
                const apiUrl = 'https://api.anunciapicos.shop/message/send';

                const bodyPayload = {
                    receiverId: parseInt(receiverId, 10),
                    message: message,
                };

                const headers = {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`,
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(bodyPayload),
                });
                
                if (!response.ok) {
                    const errorData = await response.json().catch(() => null);
                    const errorMessage = errorData?.message || `Erro HTTP: ${response.status}`;
                    throw new Error(errorMessage);
                }
                return await response.json();
            }

            // --- EVENT LISTENER ---
            
            messageForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                const messageText = messageInput.value.trim();

                if (!messageText) {
                    return; // Não envia mensagens vazias
                }

                // Verifica novamente se o token e o ID são válidos antes de enviar
                if (!receiverId || !authToken) {
                    alert("Erro de configuração. Não é possível enviar a mensagem.");
                    return;
                }
                
                addMessageToUI(messageText, 'sent');
                messageInput.value = '';

                try {
                    const apiResponse = await enviarMensagem(receiverId, messageText, authToken);
                    console.log('API respondeu com sucesso:', apiResponse);
                    
                } catch (error) {
                    console.error('Falha ao enviar a mensagem:', error);
                    addMessageToUI(`Falha ao enviar. Erro: ${error.message}`, 'error');
                    messageInput.value = messageText;
                }
            });

            // Inicia o chat quando a página carrega
            initializeChat();
        });
    </script>
</body>
</html>