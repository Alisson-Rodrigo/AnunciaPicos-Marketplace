@page "/chat"

<NavBar />
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <style>
          
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    height: 100vh;
    overflow: hidden;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.chat-container {
    display: flex;
    height: 100vh;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    margin: 8px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

/* Lista de Conversas */
.conversations-panel {
    width: 350px;
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
    border-right: 1px solid rgba(226, 232, 240, 0.8);
    display: flex;
    flex-direction: column;
    position: relative;
}

.conversations-panel::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.3), transparent);
}

.conversations-header {
    padding: 1.5rem 1.25rem;
    border-bottom: 1px solid rgba(226, 232, 240, 0.6);
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
}

.header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.header-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.375rem;
    font-weight: 700;
    background: linear-gradient(135deg, #667eea, #764ba2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.header-indicators {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.status-indicator {
    width: 0.875rem;
    height: 0.875rem;
    border-radius: 50%;
    position: relative;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.8);
}

.status-connected {
    background: linear-gradient(135deg, #10b981, #059669);
    animation: pulse-green 2s infinite;
}

.status-disconnected {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    animation: pulse-red 2s infinite;
}



.unread-badge {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 12px;
    padding: 0.25rem 0.625rem;
    box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
    min-width: 1.25rem;
    text-align: center;
}

.conversations-list {
    flex: 1;
    overflow-y: auto;
    scroll-behavior: smooth;
}

.conversations-list::-webkit-scrollbar {
    width: 4px;
}

.conversations-list::-webkit-scrollbar-track {
    background: transparent;
}

.conversations-list::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.3);
    border-radius: 2px;
}

.conversations-list::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.5);
}

.conversation-item {
    padding: 1.25rem;
    border-bottom: 1px solid rgba(243, 244, 246, 0.8);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    background: transparent;
}

.conversation-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 0;
    background: linear-gradient(135deg, #667eea, #764ba2);
    transition: width 0.3s ease;
}

.conversation-item:hover {
    background: rgba(249, 250, 251, 0.8);
    transform: translateY(-1px);
}

.conversation-item.active {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.1), rgba(139, 92, 246, 0.05));
    border-left: none;
}

.conversation-item.active::before {
    width: 4px;
}

.conversation-content {
    display: flex;
    align-items: center;
    gap: 1rem;
    position: relative;
    z-index: 1;
}

.avatar {
    width: 3.5rem;
    height: 3.5rem;
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.8);
    position: relative;
}

.avatar::before {
    content: '';
    position: absolute;
    inset: -2px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 50%;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.conversation-item:hover .avatar::before,
.conversation-item.active .avatar::before {
    opacity: 1;
}

.avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.conversation-info {
    flex: 1;
    min-width: 0;
}

.conversation-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.25rem;
}

.conversation-name {
    font-weight: 600;
    color: #1f2937;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 0.95rem;
}

.conversation-time {
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
}

.conversation-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.last-message {
    font-size: 0.875rem;
    color: #6b7280;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1.4;
}

.conversation-badge {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 12px;
    padding: 0.25rem 0.625rem;
    margin-left: 0.75rem;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    min-width: 1.25rem;
    text-align: center;
}

.empty-conversations {
    padding: 3rem 2rem;
    text-align: center;
    color: #6b7280;
}

.empty-conversations svg {
    margin: 0 auto 1.5rem;
    opacity: 0.6;
}

/* √Årea de Chat */
.chat-panel {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
}

.chat-header {
    padding: 1.5rem 1.25rem;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(226, 232, 240, 0.6);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.chat-header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.chat-avatar {
    width: 3rem;
    height: 3rem;
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.8);
}

.chat-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.chat-user-info h3 {
    font-weight: 600;
    color: #1f2937;
    font-size: 1.125rem;
    margin-bottom: 0.25rem;
}

.typing-indicator {
    font-size: 0.875rem;
    color: #3b82f6;
    font-weight: 500;
    animation: pulse 1.5s infinite;
}



.messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
    background: linear-gradient(145deg, #f8fafc 0%, #f1f5f9 100%);
    scroll-behavior: smooth;
}

.messages-container::-webkit-scrollbar {
    width: 6px;
}

.messages-container::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 3px;
}

.messages-container::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.4);
    border-radius: 3px;
}

.messages-container::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.6);
}

.loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 8rem;
}

.spinner {
    width: 2.5rem;
    height: 2.5rem;
    border: 3px solid rgba(226, 232, 240, 0.3);
    border-top: 3px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}


.message-wrapper {
    display: flex;
    margin-bottom: 1.5rem;
    animation: fadeInUp 0.3s ease-out;
}



.message-wrapper.sent {
    justify-content: flex-end;
}

.message-wrapper.received {
    justify-content: flex-start;
}

.message {
    max-width: 28rem;
    padding: 1rem 1.25rem;
    border-radius: 1.25rem;
    position: relative;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    backdrop-filter: blur(10px);
}

.message.sent {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    border-bottom-right-radius: 0.5rem;
}

.message.received {
    background: rgba(255, 255, 255, 0.9);
    color: #1f2937;
    border: 1px solid rgba(226, 232, 240, 0.6);
    border-bottom-left-radius: 0.5rem;
}

.message-text {
    font-size: 0.9rem;
    line-height: 1.5;
    word-wrap: break-word;
}

.message-footer {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    margin-top: 0.5rem;
    gap: 0.75rem;
}

.message-time {
    font-size: 0.75rem;
    opacity: 0.7;
    font-weight: 500;
}

.message-status {
    font-size: 0.75rem;
    opacity: 0.7;
}

.read-indicator.read svg {
    stroke: #4FC3F7;
    filter: drop-shadow(0 0 2px rgba(79, 195, 247, 0.3));
}

.read-indicator.sent svg {
    stroke: rgba(255, 255, 255, 0.7);
}

.message-input-container {
    padding: 1.5rem 1.25rem;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-top: 1px solid rgba(226, 232, 240, 0.6);
}

.message-form {
    display: flex;
    gap: 0.75rem;
    align-items: flex-end;
}

.message-input {
    flex: 1;
    padding: 0.875rem 1.25rem;
    border: 2px solid rgba(226, 232, 240, 0.6);
    border-radius: 1.25rem;
    outline: none;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    line-height: 1.4;
    resize: none;
    min-height: 3rem;
    max-height: 8rem;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
}

.message-input:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    background: white;
}

.message-input:disabled {
    background-color: rgba(243, 244, 246, 0.8);
    cursor: not-allowed;
}

.send-button {
    padding: 0.875rem 1.25rem;
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    border: none;
    border-radius: 1.25rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 3rem;
    height: 3rem;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.send-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #2563eb, #1d4ed8);
    transform: translateY(-1px);
    box-shadow: 0 6px 16px rgba(59, 130, 246, 0.4);
}

.send-button:active:not(:disabled) {
    transform: translateY(0);
}

.send-button:disabled {
    background: linear-gradient(135deg, #d1d5db, #9ca3af);
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.empty-chat {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: linear-gradient(145deg, #f8fafc 0%, #f1f5f9 100%);
    text-align: center;
    color: #6b7280;
    padding: 3rem;
}

.empty-chat svg {
    margin: 0 auto 1.5rem;
    opacity: 0.6;
}

.empty-chat h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #374151;
}

.empty-chat p {
    max-width: 24rem;
    line-height: 1.6;
}

.error-message {
    background: linear-gradient(135deg, #fee2e2, #fecaca);
    color: #dc2626;
    padding: 1rem 1.25rem;
    border-radius: 0.75rem;
    margin-bottom: 1rem;
    border: 1px solid rgba(254, 202, 202, 0.8);
    box-shadow: 0 2px 8px rgba(220, 38, 38, 0.1);
    font-weight: 500;
}

.success-message {
    background: linear-gradient(135deg, #d1fae5, #a7f3d0);
    color: #065f46;
    padding: 1rem 1.25rem;
    border-radius: 0.75rem;
    margin-bottom: 1rem;
    border: 1px solid rgba(167, 243, 208, 0.8);
    box-shadow: 0 2px 8px rgba(6, 95, 70, 0.1);
    font-weight: 500;
}

/* Responsividade */

    </style>
</head>
<body>
    <div class="chat-container">
        <div class="conversations-panel" id="conversationsPanel">
            <div class="conversations-header">
                <div class="header-content">
                    <h2 class="header-title">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                        </svg>
                        Conversas
                    </h2>
                    <div class="header-indicators">
                        <div class="status-indicator" id="statusIndicator"></div>
                        <span class="unread-badge" id="unreadBadge" style="display: none;">0</span>
                    </div>
                </div>
            </div>
            
            <div class="conversations-list" id="conversationsList">
                <div class="empty-conversations" id="emptyConversations">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    <p>Nenhuma conversa encontrada</p>
                </div>
            </div>
        </div>

        <div class="chat-panel" id="chatPanel">
            <div id="emptyChat" class="empty-chat">
                <div>
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                    <h3>Selecione uma conversa</h3>
                    <p>Escolha uma conversa para come√ßar a enviar mensagens</p>
                </div>
            </div>

            <div id="activeChat" style="display: none; flex-direction: column; height: 100%;">
                <div class="chat-header">
                    <div class="chat-header-content">
                        <div class="chat-avatar" id="chatAvatar">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                        </div>
                        <div class="chat-user-info">
                            <h3 id="chatUserName">Usu√°rio</h3>
                            <div class="typing-indicator" id="typingIndicator" style="display: none;"></div>
                        </div>
                    </div>
                </div>

                <div class="messages-container" id="messagesContainer">
                    <div class="loading-spinner" id="loadingSpinner" style="display: none;">
                        <div class="spinner"></div>
                    </div>
                </div>

                <div class="message-input-container">
                    <form class="message-form" id="messageForm">
                        <input
                            type="text"
                            id="messageInput"
                            placeholder="Digite sua mensagem..."
                            class="message-input"
                        />
                        <button type="submit" class="send-button" id="sendButton">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="22" y1="2" x2="11" y2="13"></line>
                                <polygon points="22,2 15,22 11,13 2,9"></polygon>
                            </svg>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

<script>
const token = localStorage.getItem("authToken"); 
let conversaAtual = null;
let pollingInterval = null;
let currentUserId = null; 

const POLLING_INTERVAL = 3000;
const CONVERSATIONS_REFRESH_INTERVAL = 15000;

async function obterUsuarioLogado() {
    try {
        const response = await fetch('https://api.anunciapicos.shop/profile/myprofile', { 
            headers: { 'Authorization': `Bearer ${token}` } 
        });
        if (response.ok) {
            const userData = await response.json();
            currentUserId = userData.id || userData.Id;
        }
    } catch (error) { 
        console.error('Erro ao obter dados do usu√°rio:', error); 
    }
}

async function carregarConversas() {
    try {
        const response = await fetch('https://api.anunciapicos.shop/message/conversations', { 
            headers: { 'Authorization': `Bearer ${token}` } 
        });
        if (!response.ok) return;
        const conversas = await response.json();
        preencherListaConversas(conversas);
    } catch (error) { 
        console.error('Erro ao carregar conversas:', error); 
    }
}

// **NOVA FUN√á√ÉO PARA CRIAR CHAT ENVIANDO MENSAGEM AUTOM√ÅTICA**
async function criarChatComMensagem(receiverId, mensagemInicial = "Ol√°! üëã") {
    try {
        console.log(`Criando conversa com usu√°rio ${receiverId} enviando mensagem autom√°tica...`);
        
        // Envia uma mensagem autom√°tica para criar a conversa
        const response = await fetch('https://api.anunciapicos.shop/message/send', {
            method: 'POST',
            headers: { 
                'Authorization': `Bearer ${token}`, 
                'Content-Type': 'application/json' 
            },
            body: JSON.stringify({ 
                receiverId: parseInt(receiverId), 
                message: mensagemInicial 
            })
        });
        
        if (!response.ok) {
            throw new Error(`Erro ao criar chat enviando mensagem: ${response.status}`);
        }
        
        console.log('Conversa criada com sucesso atrav√©s de mensagem autom√°tica');
        
        // Aguarda um pouco para o servidor processar
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Recarrega as conversas para incluir a nova conversa
        await carregarConversas();
        
        // Tenta encontrar a conversa rec√©m-criada
        const response2 = await fetch('https://api.anunciapicos.shop/message/conversations', { 
            headers: { 'Authorization': `Bearer ${token}` } 
        });
        
        if (response2.ok) {
            const conversas = await response2.json();
            const novaConversa = conversas.find(c => 
                parseInt(c.otherUserId) === parseInt(receiverId)
            );
            return novaConversa;
        }
        
        return null;
    } catch (error) {
        console.error('Erro ao criar chat com mensagem:', error);
        throw error;
    }
}

// **FUN√á√ÉO PARA VERIFICAR SE CONVERSA EXISTE OU CRIAR COM MENSAGEM**
async function verificarOuCriarConversa(receiverId, criarSeNaoExistir = true) {
    try {
        // Primeiro, tenta encontrar a conversa existente
        const response = await fetch('https://api.anunciapicos.shop/message/conversations', { 
            headers: { 'Authorization': `Bearer ${token}` } 
        });
        
        if (response.ok) {
            const conversas = await response.json();
            const conversaExistente = conversas.find(c => 
                parseInt(c.otherUserId) === parseInt(receiverId)
            );
            
            if (conversaExistente) {
                console.log('Conversa existente encontrada:', conversaExistente);
                return conversaExistente;
            }
        }
        
        // Se n√£o encontrou a conversa e deve criar
        if (criarSeNaoExistir) {
            console.log(`Conversa n√£o encontrada para receiverId ${receiverId}. Criando com mensagem autom√°tica...`);
            const novaConversa = await criarChatComMensagem(receiverId);
            
            if (novaConversa) {
                return novaConversa;
            }
        }
        
        return null;
    } catch (error) {
        console.error('Erro ao verificar ou criar conversa:', error);
        throw error;
    }
}

// **FUN√á√ÉO PARA INICIAR CONVERSA COM USU√ÅRIO ESPEC√çFICO (VINDO DE OUTRA P√ÅGINA)**
async function iniciarConversaComUsuario(receiverId, userName = null, mensagemInicial = "Ol√°! üëã") {
    try {
        console.log(`Iniciando conversa com usu√°rio ID: ${receiverId}`);
        
        // Primeiro verifica se j√° existe conversa
        let conversa = await verificarOuCriarConversa(receiverId, false);
        
        // Se n√£o existe, cria enviando mensagem autom√°tica
        if (!conversa) {
            console.log('Conversa n√£o existe, criando com mensagem autom√°tica...');
            
            // Mostra loading na interface
            document.getElementById('emptyChat').style.display = 'none';
            document.getElementById('activeChat').style.display = 'flex';
            document.getElementById('chatUserName').textContent = userName || `Usu√°rio ${receiverId}`;
            document.getElementById('messagesContainer').innerHTML = '<div style="text-align: center; color: #666; padding: 20px;">Iniciando conversa...</div>';
            
            // Cria a conversa enviando mensagem autom√°tica
            conversa = await criarChatComMensagem(receiverId, mensagemInicial);
        }
        
        if (conversa) {
            // Seleciona a conversa encontrada ou criada
            await selecionarConversa(conversa);
            return conversa;
        } else {
            throw new Error('N√£o foi poss√≠vel criar a conversa');
        }
        
    } catch (error) {
        console.error('Erro ao iniciar conversa:', error);
        
        // Se falhou, mostra erro na interface
        document.getElementById('emptyChat').style.display = 'none';
        document.getElementById('activeChat').style.display = 'flex';
        document.getElementById('chatUserName').textContent = userName || `Usu√°rio ${receiverId}`;
        document.getElementById('messagesContainer').innerHTML = `
            <div style="text-align: center; color: #f44336; padding: 20px; background: #ffebee; border-radius: 8px; margin: 20px;">
                <div style="font-weight: bold; margin-bottom: 8px;">Erro ao iniciar conversa</div>
                <div style="font-size: 0.9em;">N√£o foi poss√≠vel criar a conversa. Tente novamente.</div>
                <button onclick="window.location.reload()" style="margin-top: 12px; padding: 8px 16px; background: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer;">
                    Tentar Novamente
                </button>
            </div>
        `;
        
        return null;
    }
}

// **FUN√á√ÉO CORRIGIDA PARA ENVIAR MENSAGEM**
async function enviarMensagem(receiverId, mensagem) {
    try {
        // Se n√£o h√° conversa atual ou n√£o tem conversationId, tenta criar/verificar
        if (!conversaAtual || !conversaAtual.conversationId) {
            console.log('Conversa n√£o existe, tentando criar...');
            await verificarOuCriarConversa(receiverId);
        }
        
        // Envia a mensagem para o servidor
        const response = await fetch('https://api.anunciapicos.shop/message/send', {
            method: 'POST',
            headers: { 
                'Authorization': `Bearer ${token}`, 
                'Content-Type': 'application/json' 
            },
            body: JSON.stringify({ 
                receiverId: parseInt(receiverId), 
                message: mensagem 
            })
        });
        
        if (!response.ok) {
            throw new Error(`Erro ao enviar mensagem: ${response.status}`);
        }
        
        // Recarrega as conversas e mensagens
        await carregarConversas();
        
        // Se a conversa atual n√£o tinha ID, tenta encontr√°-la agora
        if (!conversaAtual.conversationId) {
            const conversaAtualizada = await verificarOuCriarConversa(receiverId);
            conversaAtual = conversaAtualizada;
        }
        
        // Atualiza as mensagens
        await verificarNovasMensagens();
        
    } catch (error) { 
        console.error('Erro ao enviar mensagem:', error);
        
        // Mostra mensagem de erro para o usu√°rio
        const messagesContainer = document.getElementById('messagesContainer');
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = 'background: #ffebee; color: #c62828; padding: 12px; margin: 8px 0; border-radius: 8px; text-align: center; border: 1px solid #ef9a9a;';
        errorDiv.textContent = 'Erro ao enviar mensagem. Tente novamente.';
        messagesContainer.appendChild(errorDiv);
        
        // Remove a mensagem de erro ap√≥s 5 segundos
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
    }
}

function isMensagemDoUsuarioLogado(mensagem) {
    if (currentUserId) {
        const senderId = mensagem.senderId || mensagem.SenderId;
        return parseInt(senderId) === parseInt(currentUserId);
    }
    return false;
}

function adicionarOuAtualizarMensagem(msg) {
    const textoMsg = msg.text || msg.Text || msg.message || msg.Message || '';
    const dataMsg = new Date(msg.date || msg.Date || msg.sentAt || msg.SentAt || msg.timestamp);
    const isFromMe = isMensagemDoUsuarioLogado(msg);
    const isRead = msg.isRead || msg.IsRead || false;
    const msgId = `msg_api_${msg.id}`;

    const msgElement = document.querySelector(`[data-msg-id="${msgId}"]`);

    if (msgElement) {
        // Se a mensagem j√° existe, apenas atualiza o status de leitura
        if (isFromMe && isRead) {
            atualizarStatusDeUmaMensagem(msgElement, true);
        }
    } else {
        // Se n√£o existe, cria o elemento da mensagem
        adicionarMensagemAoChat(textoMsg, isFromMe, dataMsg, msgId, isRead);
    }
}

function adicionarMensagemAoChat(mensagem, isFromMe, timestamp, msgId, isRead) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;

    const divMsg = document.createElement('div');
    divMsg.setAttribute('data-msg-id', msgId);
    
    const msgContainer = document.createElement('div');
    msgContainer.style.cssText = `display: flex; width: 100%; margin-bottom: 12px; ${isFromMe ? 'justify-content: flex-end;' : 'justify-content: flex-start;'}`;
    
    divMsg.style.cssText = `padding: 12px 16px; border-radius: 18px; max-width: 70%; word-break: break-word; position: relative; ${isFromMe ? 'background: linear-gradient(135deg,rgb(105, 105, 105) 0%,rgb(97, 97, 97) 100%); color: white; border-bottom-right-radius: 4px; margin-left: auto;' : 'background: #f1f3f4; color: #202124; border-bottom-left-radius: 4px; border: 1px solid #e8eaed; margin-right: auto;'} box-shadow: 0 1px 2px rgba(0,0,0,0.1); display: block;`;
    
    divMsg.innerHTML = `
        <div style="margin-bottom: 4px; line-height: 1.4;">${mensagem}</div>
        <div class="timestamp-container" style="font-size: 11px; opacity: 0.7; text-align: right; margin-top: 4px; display: flex; align-items: center; justify-content: flex-end;">
            <span>${formatarData(timestamp)}</span>
        </div>
    `;

    if (isFromMe) {
        divMsg.setAttribute('data-is-from-me', 'true');
        divMsg.querySelector('.timestamp-container').appendChild(adicionarIndicadorLeitura(isRead));
    } else {
        divMsg.querySelector('.timestamp-container').style.justifyContent = 'flex-start';
        divMsg.querySelector('.timestamp-container').style.textAlign = 'left';
    }

    msgContainer.appendChild(divMsg);
    messagesContainer.appendChild(msgContainer);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

async function verificarNovasMensagens() {
    if (!conversaAtual || !conversaAtual.conversationId) return;
    try {
        const url = `https://api.anunciapicos.shop/message/history/${conversaAtual.conversationId}`;
        const response = await fetch(url, { 
            headers: { 'Authorization': `Bearer ${token}` } 
        });
        if (!response.ok) return;

        const todasMensagens = await response.json();
        if (!Array.isArray(todasMensagens)) return;
        
        // Limpa a tela antes de redesenhar para evitar duplicatas de mensagens locais
        document.getElementById('messagesContainer').innerHTML = '';

        let hasNewUnreadMessage = false;
        todasMensagens.forEach(msg => {
            adicionarOuAtualizarMensagem(msg);
            if (!isMensagemDoUsuarioLogado(msg) && !(msg.isRead || msg.IsRead)) {
                hasNewUnreadMessage = true;
            }
        });

        if (hasNewUnreadMessage && !document.hidden) {
            marcarMensagensComoLidas(conversaAtual.conversationId);
        }
    } catch (error) { 
        console.error('Erro no polling de mensagens:', error); 
    }
}

function iniciarPollingMensagens() {
    pararPollingMensagens();
    pollingInterval = setInterval(verificarNovasMensagens, POLLING_INTERVAL);
}

function pararPollingMensagens() {
    if (pollingInterval) clearInterval(pollingInterval);
}

function preencherListaConversas(conversas) {
    const container = document.getElementById('conversationsList');
    const emptyConversationsDiv = document.getElementById('emptyConversations');

    if (!container || !emptyConversationsDiv) return;

    container.querySelectorAll('.conversation-item').forEach(item => item.remove());

    if (!conversas || conversas.length === 0) {
        emptyConversationsDiv.style.display = 'block';
    } else {
        emptyConversationsDiv.style.display = 'none';
        conversas.forEach(conversa => {
            const item = document.createElement('div');
            item.className = 'conversation-item';
            item.setAttribute('data-conversation-id', conversa.conversationId);
            
            const avatarHTML = conversa.otherUserProfilePicture ? 
                `<img src="${conversa.otherUserProfilePicture}" alt="Avatar" style="width:40px; height:40px; border-radius:50%; object-fit:cover;" />` : 
                `<div style="width:40px; height:40px; border-radius:50%; background:#007bff; display:flex; align-items:center; justify-content:center; color:white; font-weight:bold;">${(conversa.otherUserName || 'U').charAt(0).toUpperCase()}</div>`;
            
            item.innerHTML = `
                <div>${avatarHTML}</div>
                <div style="flex-grow:1; min-width:0;">
                    <div style="font-weight:bold;">${conversa.otherUserName}</div>
                    <div style="font-size:0.8em; color:#666;">${formatarData(conversa.lastMessageDate)}</div>
                    <div style="font-size:0.85em; color: ${conversa.isLastMessageFromMe ? '#999' : '#333'}; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">${conversa.isLastMessageFromMe ? 'Voc√™: ' : ''}${conversa.lastMessage || ''}</div>
                </div>
                ${conversa.unreadMessagesCount > 0 ? `<div class="unread-count-badge" style="background:#f44336; color:#fff; border-radius:12px; padding:4px 8px; font-size:0.75em;">${conversa.unreadMessagesCount}</div>` : ''}
            `;
            item.addEventListener('click', () => selecionarConversa(conversa));
            container.appendChild(item);
        });
    }
}

function formatarData(dataISO) {
    if (!dataISO) return '';
    const data = new Date(dataISO);
    if (isNaN(data.getTime())) return '';
    const agora = new Date();
    const ontem = new Date(agora);
    ontem.setDate(ontem.getDate() - 1);
    if (data.toDateString() === agora.toDateString()) 
        return data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
    if (data.toDateString() === ontem.toDateString()) 
        return 'Ontem';
    return data.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
}

async function selecionarConversa(conversa) {
    conversaAtual = conversa;
    pararPollingMensagens();

    document.querySelectorAll('.conversation-item').forEach(el => el.classList.remove('active'));
    const conversaElement = document.querySelector(`[data-conversation-id="${conversa.conversationId}"]`);
    if (conversaElement) {
        conversaElement.classList.add('active');
    }

    document.getElementById('emptyChat').style.display = 'none';
    document.getElementById('activeChat').style.display = 'flex';
    document.getElementById('chatUserName').textContent = conversa.otherUserName;
    const chatAvatar = document.getElementById('chatAvatar');
    chatAvatar.innerHTML = conversa.otherUserProfilePicture ? 
        `<img src="${conversa.otherUserProfilePicture}" alt="Avatar" style="width:32px; height:32px; border-radius:50%; object-fit:cover;" />` : 
        `<div style="width:32px; height:32px; border-radius:50%; background:#007bff; display:flex; align-items:center; justify-content:center; color:white; font-weight:bold;">${(conversa.otherUserName || 'U').charAt(0).toUpperCase()}</div>`;
    
    document.getElementById('messagesContainer').innerHTML = '<div class="loading-spinner"><div class="spinner"></div></div>';

    await verificarNovasMensagens();
    iniciarPollingMensagens();
    
    if (conversa.conversationId) {
        marcarMensagensComoLidas(conversa.conversationId);
    }
}

async function marcarMensagensComoLidas(conversationId) {
    if (!conversationId) return;
    try {
        const response = await fetch(`https://api.anunciapicos.shop/message/mark-as-read/${conversationId}`, { 
            method: 'PUT', 
            headers: { 'Authorization': `Bearer ${token}` } 
        });
        if (response.ok) {
            const badge = document.querySelector(`.conversation-item[data-conversation-id="${conversationId}"] .unread-count-badge`);
            if (badge) badge.remove();
        }
    } catch (error) { 
        console.error('Erro ao marcar mensagens como lidas:', error); 
    }
}

function adicionarIndicadorLeitura(isRead = false) {
    const indicador = document.createElement('div');
    indicador.className = `read-indicator ${isRead ? 'read' : 'sent'}`;
    indicador.style.cssText = `display: inline-flex; align-items: center; margin-left: 4px;`;
    const svgIcon = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>`;
    indicador.innerHTML = svgIcon;
    return indicador;
}

function atualizarStatusDeUmaMensagem(msgElement, isRead) {
    const indicador = msgElement.querySelector('.read-indicator');
    if (indicador && isRead && !indicador.classList.contains('read')) {
        indicador.classList.remove('sent');
        indicador.classList.add('read');
    }
}

// **FUN√á√ÉO PARA DETECTAR PAR√ÇMETROS DA URL E INICIAR CONVERSA AUTOMATICAMENTE**
function verificarParametrosURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const receiverId = urlParams.get('receiverId');
    const userName = urlParams.get('userName');
    
    if (receiverId) {
        console.log(`Par√¢metro receiverId detectado: ${receiverId}`);
        
        // Aguarda um pouco para garantir que o usu√°rio foi carregado
        setTimeout(async () => {
            await iniciarConversaComUsuario(receiverId, userName);
        }, 1000);
        
        // Remove os par√¢metros da URL para limpar
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
    }
}

// **FUN√á√ÉO GLOBAL PARA USO EXTERNO**
window.iniciarChatComUsuario = iniciarConversaComUsuario;

document.addEventListener('DOMContentLoaded', async () => {
    await obterUsuarioLogado();
    await carregarConversas();
    
    // Verifica se veio com par√¢metros na URL para iniciar conversa espec√≠fica
    verificarParametrosURL();
    
    setInterval(carregarConversas, CONVERSATIONS_REFRESH_INTERVAL);
    
    const messageForm = document.getElementById('messageForm');
    messageForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const messageInput = document.getElementById('messageInput');
        const mensagem = messageInput.value.trim();
        if (!mensagem || !conversaAtual) return;
        
        messageInput.disabled = true;
        await enviarMensagem(conversaAtual.otherUserId, mensagem);
        messageInput.value = '';
        messageInput.disabled = false;
        messageInput.focus();
    });

    document.getElementById('messageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            messageForm.dispatchEvent(new Event('submit'));
        }
    });

    document.addEventListener('visibilitychange', () => {
        if (!document.hidden && conversaAtual && conversaAtual.conversationId) {
            marcarMensagensComoLidas(conversaAtual.conversationId);
        }
    });

    console.log('Chat inicializado!');
});
</script>
</body>
</html>