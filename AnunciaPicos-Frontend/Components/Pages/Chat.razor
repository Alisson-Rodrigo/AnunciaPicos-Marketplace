<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            height: 100vh;
            overflow: hidden;
        }

        .chat-container {
            display: flex;
            height: 100vh;
            background-color: #f3f4f6;
        }

        /* Lista de Conversas */
        .conversations-panel {
            width: 33.333333%;
            background-color: white;
            border-right: 1px solid #e5e7eb;
            display: flex;
            flex-direction: column;
        }

        .conversations-header {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
        }

        .header-indicators {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-indicator {
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
        }

        .status-connected {
            background-color: #10b981;
        }

        .status-disconnected {
            background-color: #ef4444;
        }

        .unread-badge {
            background-color: #ef4444;
            color: white;
            font-size: 0.75rem;
            border-radius: 9999px;
            padding: 0.25rem 0.5rem;
        }

        .conversations-list {
            flex: 1;
            overflow-y: auto;
        }

        .conversation-item {
            padding: 1rem;
            border-bottom: 1px solid #f3f4f6;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .conversation-item:hover {
            background-color: #f9fafb;
        }

        .conversation-item.active {
            background-color: #eff6ff;
            border-left: 4px solid #3b82f6;
        }

        .conversation-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .avatar {
            width: 3rem;
            height: 3rem;
            background-color: #d1d5db;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .conversation-info {
            flex: 1;
            min-width: 0;
        }

        .conversation-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .conversation-name {
            font-weight: 500;
            color: #111827;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-time {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .conversation-footer {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .last-message {
            font-size: 0.875rem;
            color: #6b7280;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-badge {
            background-color: #3b82f6;
            color: white;
            font-size: 0.75rem;
            border-radius: 9999px;
            padding: 0.25rem 0.5rem;
            margin-left: 0.5rem;
        }

        .empty-conversations {
            padding: 2rem;
            text-align: center;
            color: #6b7280;
        }

        .empty-conversations svg {
            margin: 0 auto 1rem;
        }

        /* √Årea de Chat */
        .chat-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 1rem;
            background-color: white;
            border-bottom: 1px solid #e5e7eb;
        }

        .chat-header-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .chat-avatar {
            width: 2.5rem;
            height: 2.5rem;
            background-color: #d1d5db;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .chat-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .chat-user-info h3 {
            font-weight: 500;
            color: #111827;
        }

        .typing-indicator {
            font-size: 0.875rem;
            color: #3b82f6;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background-color: #f9fafb;
        }

        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 8rem;
        }

        .spinner {
            width: 2rem;
            height: 2rem;
            border: 2px solid #e5e7eb;
            border-top: 2px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

       
        .message-wrapper {
            display: flex;
            margin-bottom: 1rem;
        }

        .message-wrapper.sent {
            justify-content: flex-end;
        }

        .message-wrapper.received {
            justify-content: flex-start;
        }

        .message {
            max-width: 24rem;
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
        }

        .message.sent {
            background-color: #3b82f6;
            color: white;
        }

        .message.received {
            background-color: #e5e7eb;
            color: #1f2937;
        }

        .message-text {
            font-size: 0.875rem;
        }

        .message-footer {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            margin-top: 0.25rem;
            gap: 0.5rem;
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.75;
        }

        .message-status {
            font-size: 0.75rem;
            opacity: 0.75;
        }

        .message-input-container {
            padding: 1rem;
            background-color: white;
            border-top: 1px solid #e5e7eb;
        }

        .message-form {
            display: flex;
            gap: 0.5rem;
        }

        .message-input {
            flex: 1;
            padding: 0.5rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            outline: none;
            transition: border-color 0.2s;
        }

        .message-input:focus {
            border-color: #3b82f6;
        }

        .message-input:disabled {
            background-color: #f3f4f6;
        }

        .send-button {
            padding: 0.5rem 1rem;
            background-color: #3b82f6;
            color: white;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .send-button:hover:not(:disabled) {
            background-color: #2563eb;
        }

        .send-button:disabled {
            background-color: #d1d5db;
            cursor: not-allowed;
        }

        .empty-chat {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f9fafb;
            text-align: center;
            color: #6b7280;
        }

        .empty-chat svg {
            margin: 0 auto 1rem;
        }

        .empty-chat h3 {
            font-size: 1.125rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .error-message {
            background-color: #fee2e2;
            color: #dc2626;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            border: 1px solid #fecaca;
        }

        .success-message {
            background-color: #d1fae5;
            color: #065f46;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            border: 1px solid #a7f3d0;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Lista de Conversas -->
        <div class="conversations-panel" id="conversationsPanel">
            <div class="conversations-header">
                <div class="header-content">
                    <h2 class="header-title">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                        </svg>
                        Conversas
                    </h2>
                    <div class="header-indicators">
                        <div class="status-indicator" id="statusIndicator"></div>
                        <span class="unread-badge" id="unreadBadge" style="display: none;">0</span>
                    </div>
                </div>
            </div>
            
            <div class="conversations-list" id="conversationsList">
                <div class="empty-conversations" id="emptyConversations">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    <p>Nenhuma conversa encontrada</p>
                </div>
            </div>
        </div>

        <!-- √Årea de Chat -->
        <div class="chat-panel" id="chatPanel">
            <div id="emptyChat" class="empty-chat">
                <div>
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                    <h3>Selecione uma conversa</h3>
                    <p>Escolha uma conversa para come√ßar a enviar mensagens</p>
                </div>
            </div>

            <div id="activeChat" style="display: none; flex-direction: column; height: 100%;">
                <!-- Header da Conversa -->
                <div class="chat-header">
                    <div class="chat-header-content">
                        <div class="chat-avatar" id="chatAvatar">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                        </div>
                        <div class="chat-user-info">
                            <h3 id="chatUserName">Usu√°rio</h3>
                            <div class="typing-indicator" id="typingIndicator" style="display: none;"></div>
                        </div>
                    </div>
                </div>

                <!-- Mensagens -->
                <div class="messages-container" id="messagesContainer">
                    <div class="loading-spinner" id="loadingSpinner" style="display: none;">
                        <div class="spinner"></div>
                    </div>
                </div>

                <!-- Input de Mensagem -->
                <div class="message-input-container">
                    <form class="message-form" id="messageForm">
                        <input
                            type="text"
                            id="messageInput"
                            placeholder="Digite sua mensagem..."
                            class="message-input"
                        />
                        <button type="submit" class="send-button" id="sendButton">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="22" y1="2" x2="11" y2="13"></line>
                                <polygon points="22,2 15,22 11,13 2,9"></polygon>
                            </svg>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
// Vari√°veis globais
const token = localStorage.getItem('authToken');
let conversaAtual = null;
let receiverIdAtual = null;
let pollingInterval = null;
let lastMessageTimestamp = null;
let isPollingActive = false;
let mensagensCarregadas = new Set(); // Para evitar duplicatas
let currentUserId = null; // ID do usu√°rio logado

// Configura√ß√£o de tempo real
const POLLING_INTERVAL = 5000; // Aumentado para 3 segundos
const CONVERSATIONS_REFRESH_INTERVAL = 15000; // Aumentado para 15 segundos

// Fun√ß√£o para obter receiverId da URL
function getReceiverIdFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('receiverId');
}

// Fun√ß√£o para obter informa√ß√µes do usu√°rio logado
async function obterUsuarioLogado() {
    try {
        const response = await fetch('https://api.anunciapicos.shop/profile/myprofile', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const userData = await response.json();
            currentUserId = userData.id || userData.Id || userData.userId || userData.UserId;
            console.log('ID do usu√°rio logado:', currentUserId);
        }
    } catch (error) {
        console.error('Erro ao obter dados do usu√°rio:', error);
    }
}

// Fun√ß√£o para mostrar mensagem de erro (sem efeitos visuais)
function mostrarMensagem(tipo, texto) {
    console.log(`[${tipo.toUpperCase()}] ${texto}`);
    
    // Mostrar mensagem discreta no topo
    const mensagemDiv = document.createElement('div');
    mensagemDiv.className = tipo === 'error' ? 'error-message' : 'success-message';
    mensagemDiv.textContent = texto;
    mensagemDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 10px 15px;
        border-radius: 5px;
        color: white;
        background: ${tipo === 'error' ? '#f44336' : '#4caf50'};
        z-index: 1000;
        font-size: 14px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    `;
    
    document.body.appendChild(mensagemDiv);
    
    setTimeout(() => {
        if (mensagemDiv.parentNode) {
            mensagemDiv.parentNode.removeChild(mensagemDiv);
        }
    }, 3000);
}

// Fun√ß√£o para carregar conversas
async function carregarConversas() {
    const url = 'https://api.anunciapicos.shop/message/conversations';

    try {
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) throw new Error(`Erro na requisi√ß√£o: ${response.status}`);

        const conversas = await response.json();
        preencherListaConversas(conversas);

        // Se n√£o h√° conversas e h√° receiverId na URL, criar nova conversa
        const receiverIdUrl = getReceiverIdFromUrl();
        if ((!conversas || conversas.length === 0) && receiverIdUrl) {
            await criarNovaConversa(receiverIdUrl);
        }

    } catch (error) {
        console.error('Erro ao carregar conversas:', error);
        mostrarErroConversas();
    }
}

// Fun√ß√£o para criar nova conversa
async function criarNovaConversa(receiverId) {
    console.log('Criando nova conversa com receiverId:', receiverId);
    
    try {
        await enviarMensagem(receiverId, 'Isso ainda est√° dispon√≠vel?', true);
        setTimeout(() => {
            carregarConversas();
        }, 1000);
    } catch (error) {
        console.error('Erro ao criar nova conversa:', error);
        mostrarMensagem('error', 'Erro ao iniciar nova conversa');
    }
}

// Fun√ß√£o para enviar mensagem
async function enviarMensagem(receiverId, mensagem, isNovaConversa = false) {
    const url = 'https://api.anunciapicos.shop/message/send';
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                receiverId: parseInt(receiverId),
                message: mensagem
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Erro ${response.status}: ${errorText}`);
        }

        const resultado = await response.json();
        console.log('Mensagem enviada:', resultado);

        if (!isNovaConversa) {
            // Gerar ID √∫nico para a mensagem
            const msgId = `msg_${Date.now()}_${Math.random()}`;
            
            // Adicionar mensagem enviada ao chat atual (SEMPRE √â NOSSA - lado direito)
            adicionarMensagemAoChat(mensagem, true, new Date(), msgId);
            
            // Atualizar timestamp da √∫ltima mensagem
            lastMessageTimestamp = new Date().toISOString();
        }

        return resultado;

    } catch (error) {
        console.error('Erro ao enviar mensagem:', error);
        if (!isNovaConversa) {
            mostrarMensagem('error', `Erro ao enviar mensagem`);
        }
        throw error;
    }
}

// Fun√ß√£o para determinar se a mensagem √© do usu√°rio logado
function isMensagemDoUsuarioLogado(mensagem) {
    // Primeiro, verificar se h√° propriedade isFromMe
    if (mensagem.hasOwnProperty('isFromMe')) {
        return mensagem.isFromMe;
    }
    if (mensagem.hasOwnProperty('IsFromMe')) {
        return mensagem.IsFromMe;
    }
    
    // Se n√£o h√° isFromMe, comparar IDs do remetente
    if (currentUserId) {
        const senderId = mensagem.senderId || mensagem.SenderId || mensagem.fromUserId || mensagem.FromUserId;
        if (senderId) {
            return parseInt(senderId) === parseInt(currentUserId);
        }
    }
    
    // Como √∫ltimo recurso, se a mensagem veio da API ap√≥s o envio, assumir que √© nossa
    return false;
}

// Fun√ß√£o para adicionar mensagem ao chat visualmente (SEM DUPLICATAS)
function adicionarMensagemAoChat(mensagem, isFromMe, timestamp = new Date(), msgId = null) {
    const messagesContainer = document.getElementById('messagesContainer');
    
    // Gerar ID se n√£o fornecido
    if (!msgId) {
        msgId = `msg_${timestamp.getTime()}_${isFromMe ? 'me' : 'other'}_${mensagem.slice(0, 10)}`;
    }
    
    // Verificar se mensagem j√° existe
    if (mensagensCarregadas.has(msgId)) {
        return;
    }
    
    mensagensCarregadas.add(msgId);
    
    const divMsg = document.createElement('div');
    divMsg.setAttribute('data-msg-id', msgId);
    
    // Container para a mensagem
    const msgContainer = document.createElement('div');
    msgContainer.style.cssText = `
        display: flex;
        width: 100%;
        margin-bottom: 12px;
        ${isFromMe ? 'justify-content: flex-end;' : 'justify-content: flex-start;'}
    `;
    
    // Estilo da bolha de mensagem
    divMsg.style.cssText = `
        padding: 12px 16px;
        border-radius: 18px;
        max-width: 70%;
        word-break: break-word;
        position: relative;
        ${isFromMe ? 
            'background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; border-bottom-right-radius: 4px;' : 
            'background: #f1f3f4; color: #202124; border-bottom-left-radius: 4px; border: 1px solid #e8eaed;'
        }
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    `;

    divMsg.innerHTML = `
        <div style="margin-bottom: 4px; line-height: 1.4;">${mensagem}</div>
        <div style="font-size: 11px; opacity: 0.7; text-align: ${isFromMe ? 'right' : 'left'}; margin-top: 4px;">
            ${timestamp.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}
        </div>
    `;

    msgContainer.appendChild(divMsg);
    messagesContainer.appendChild(msgContainer);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

async function verificarNovasMensagens() {
    if (!conversaAtual || !conversaAtual.conversationId) return;

    try {
        const url = `https://api.anunciapicos.shop/message/history/${conversaAtual.conversationId}`;
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) throw new Error('Erro ao verificar novas mensagens');

        const novasMensagens = await response.json();

        novasMensagens.forEach(msg => {
            const textoMsg = msg.text || msg.Text || msg.message || msg.Message || '(Mensagem vazia)';
            const dataMsg = new Date(msg.date || msg.Date || msg.sentAt || msg.SentAt || msg.timestamp || msg.Timestamp);
            const isFromMe = isMensagemDoUsuarioLogado(msg);
            const msgId = msg.id || `msg_${dataMsg.getTime()}_${isFromMe ? 'me' : 'other'}_${textoMsg.slice(0, 10)}`;

            if (!mensagensCarregadas.has(msgId)) {
                adicionarMensagemAoChat(textoMsg, isFromMe, dataMsg, msgId);
                mensagensCarregadas.add(msgId);
            }
        });

        if (novasMensagens.length > 0) {
            const ultimaMensagem = novasMensagens[novasMensagens.length - 1];
            lastMessageTimestamp = ultimaMensagem.date || ultimaMensagem.Date || ultimaMensagem.sentAt || ultimaMensagem.SentAt || ultimaMensagem.timestamp || ultimaMensagem.Timestamp;
        }

    } catch (error) {
        console.error('Erro no polling de mensagens:', error);
    }
}


// Fun√ß√£o para adicionar apenas mensagens novas (SEM RECARREGAR TUDO)
function adicionarMensagensNovas(mensagens) {
    mensagens.forEach(msg => {
        const isFromMe = isMensagemDoUsuarioLogado(msg);
        const textoMsg = msg.text || msg.Text || msg.message || msg.Message || '(Mensagem vazia)';
        const dataMsg = new Date(msg.date || msg.Date || msg.sentAt || msg.SentAt || msg.timestamp || msg.Timestamp);
        const msgId = msg.id || `msg_${dataMsg.getTime()}_${isFromMe ? 'me' : 'other'}_${textoMsg.slice(0, 10)}`;
        
        adicionarMensagemAoChat(textoMsg, isFromMe, dataMsg, msgId);
    });
}

function iniciarPollingMensagens() {
    pararPollingMensagens(); // Evita m√∫ltiplos timers

    pollingInterval = setInterval(() => {
        verificarNovasMensagens();
    }, POLLING_INTERVAL); // Use a constante j√° definida, ex: 5000ms

    isPollingActive = true;
}


// Fun√ß√£o para parar polling de mensagens
function pararPollingMensagens() {
    if (pollingInterval) {
        clearInterval(pollingInterval);
        pollingInterval = null;
    }
    isPollingActive = false;
}

// Fun√ß√£o para preencher lista de conversas
function preencherListaConversas(conversas) {
    const container = document.getElementById('conversationsList');
    const emptyConversations = document.getElementById('emptyConversations');
    container.innerHTML = '';

    if (!conversas || conversas.length === 0) {
        if (emptyConversations) emptyConversations.style.display = 'block';
        return;
    }
    if (emptyConversations) emptyConversations.style.display = 'none';

    conversas.forEach(conversa => {
        const conversationId = conversa.conversationId || conversa.ConversationId;
        const otherUserId = conversa.otherUserId || conversa.OtherUserId;

        const item = document.createElement('div');
        item.classList.add('conversation-item');
        item.style.cssText = `
            cursor: pointer;
            padding: 12px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 12px;
            transition: background-color 0.2s;
        `;

        // Hover effect
        item.addEventListener('mouseenter', () => {
            if (!item.classList.contains('active')) {
                item.style.backgroundColor = '#f8f9fa';
            }
        });
        
        item.addEventListener('mouseleave', () => {
            if (!item.classList.contains('active')) {
                item.style.backgroundColor = '';
            }
        });

        const avatarHTML = conversa.otherUserProfilePicture
            ? `<img src="${conversa.otherUserProfilePicture}" alt="Avatar" style="width:40px; height:40px; border-radius:50%; object-fit:cover;" />`
            : `<div style="width:40px; height:40px; border-radius:50%; background:#007bff; display:flex; align-items:center; justify-content:center; color:white; font-weight:bold;">
                 ${(conversa.otherUserName || conversa.OtherUserName || 'U').charAt(0).toUpperCase()}
               </div>`;

        item.innerHTML = `
            <div>${avatarHTML}</div>
            <div style="flex-grow:1; min-width:0;">
                <div style="font-weight:bold; margin-bottom:2px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
                    ${conversa.otherUserName || conversa.OtherUserName}
                </div>
                <div style="font-size:0.8em; color:#666; margin-bottom:2px;">
                    ${formatarData(conversa.lastMessageDate || conversa.LastMessageDate)}
                </div>
                <div style="font-size:0.85em; color: ${conversa.isLastMessageFromMe ? '#999' : '#333'}; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
                    ${conversa.isLastMessageFromMe ? 'Voc√™: ' : ''}${conversa.lastMessage || conversa.LastMessage || '(Sem mensagem)'}
                </div>
            </div>
            ${conversa.unreadMessagesCount > 0
                ? `<div style="background:#f44336; color:#fff; border-radius:12px; padding:4px 8px; font-size:0.75em; min-width:20px; text-align:center;">
                     ${conversa.unreadMessagesCount}
                   </div>`
                : ''}
        `;

        item.addEventListener('click', () => {
            if (!conversationId) {
                alert('ConversationId inv√°lido');
                return;
            }
            
            // Armazenar dados da conversa
            conversaAtual = {
                conversationId: conversationId,
                otherUserId: otherUserId,
                otherUserName: conversa.otherUserName || conversa.OtherUserName,
                otherUserProfilePicture: conversa.otherUserProfilePicture
            };
            receiverIdAtual = otherUserId;
            
            // Remover classe active de outros itens
            document.querySelectorAll('.conversation-item').forEach(el => {
                el.classList.remove('active');
                el.style.backgroundColor = '';
            });
            
            // Adicionar classe active ao item selecionado
            item.classList.add('active');
            item.style.backgroundColor = '#e3f2fd';
            
            selecionarConversa(conversationId, conversa.otherUserName, conversa.otherUserProfilePicture);
        });

        container.appendChild(item);
    });
}

// Fun√ß√£o para formatar data
function formatarData(dataISO) {
    if (!dataISO) return '';
    const data = new Date(dataISO);
    const agora = new Date();
    const ontem = new Date(agora);
    ontem.setDate(ontem.getDate() - 1);
    
    if (data.toDateString() === agora.toDateString()) {
        return data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
    } else if (data.toDateString() === ontem.toDateString()) {
        return 'Ontem';
    } else {
        return data.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
    }
}

// Fun√ß√£o para mostrar erro nas conversas
function mostrarErroConversas() {
    const container = document.getElementById('conversationsList');
    container.innerHTML = '<p style="color: red; padding: 1rem; text-align: center;">Erro ao carregar as conversas.</p>';
}

function exibirMensagens(mensagens) {
    const messagesContainer = document.getElementById('messagesContainer');
    
    mensagensCarregadas.clear(); // üü¢ Reinicia controle de duplicatas
    messagesContainer.innerHTML = '';

    if (!mensagens || mensagens.length === 0) {
        messagesContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">Nenhuma mensagem nesta conversa.</p>';
        return;
    }

    mensagens.forEach(msg => {
        const isFromMe = isMensagemDoUsuarioLogado(msg);
        const textoMsg = msg.text || msg.Text || msg.message || msg.Message || '(Mensagem vazia)';
        const dataMsg = new Date(msg.date || msg.Date || msg.sentAt || msg.SentAt || msg.timestamp || msg.Timestamp);
        const msgId = msg.id || `msg_${dataMsg.getTime()}_${isFromMe ? 'me' : 'other'}_${textoMsg.slice(0, 10)}`;

        adicionarMensagemAoChat(textoMsg, isFromMe, dataMsg, msgId);
        mensagensCarregadas.add(msgId); // üü¢ Marca como j√° exibida
    });

    // Atualiza timestamp da √∫ltima mensagem
    const ultimaMensagem = mensagens[mensagens.length - 1];
    lastMessageTimestamp = ultimaMensagem.date || ultimaMensagem.Date || ultimaMensagem.sentAt || ultimaMensagem.SentAt || ultimaMensagem.timestamp || ultimaMensagem.Timestamp;
}

// Fun√ß√£o para selecionar conversa
// Fun√ß√£o para selecionar conversa
async function selecionarConversa(conversationId, otherUserName, otherUserProfilePicture) {
    console.log('Conversa selecionada:', conversationId);

    const emptyChat = document.getElementById('emptyChat');
    const activeChat = document.getElementById('activeChat');
    const messagesContainer = document.getElementById('messagesContainer');
    const chatUserName = document.getElementById('chatUserName');
    const chatAvatar = document.getElementById('chatAvatar');

    // Parar polling anterior
    pararPollingMensagens();

    // Mostrar o painel de chat ativo
    if (emptyChat) {
        emptyChat.style.display = 'none';
    }
    if (activeChat) {
        activeChat.style.display = 'flex';
        activeChat.style.height = '100%';
    }
    // Atualizar nome e avatar do usu√°rio
    if (chatUserName) chatUserName.textContent = otherUserName || 'Usu√°rio';
    if (chatAvatar) {
        if (otherUserProfilePicture) {
            chatAvatar.innerHTML = `<img src="${otherUserProfilePicture}" alt="Avatar" style="width:32px; height:32px; border-radius:50%; object-fit:cover;" />`;
        } else {
            chatAvatar.innerHTML = `<div style="width:32px; height:32px; border-radius:50%; background:#007bff; display:flex; align-items:center; justify-content:center; color:white; font-weight:bold; font-size:14px;">
                                     ${(otherUserName || 'U').charAt(0).toUpperCase()}
                                   </div>`;
        }
    }

    if (messagesContainer) {
        messagesContainer.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">Carregando mensagens...</div>';
    }

    try {
        const url = `https://api.anunciapicos.shop/message/history/${conversationId}`;
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) throw new Error(`Erro ao buscar mensagens: ${response.status}`);

        const mensagens = await response.json();
        exibirMensagens(mensagens);
        
        // Iniciar polling para esta conversa
        iniciarPollingMensagens();

    } catch (error) {
        console.error(error);
        if (messagesContainer) {
            messagesContainer.innerHTML = `<p style="color:red; text-align: center; padding: 20px;">Erro ao carregar mensagens: ${error.message}</p>`;
        }
    }
}

// Event listener para o formul√°rio de mensagem
document.addEventListener('DOMContentLoaded', function() {
    const messageForm = document.getElementById('messageForm');
    if (messageForm) {
        messageForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const mensagem = messageInput.value.trim();
            
            if (!mensagem) return;
            
            // Se n√£o h√° conversa atual, mas h√° receiverId da URL
            if (!conversaAtual && !receiverIdAtual) {
                const receiverIdUrl = getReceiverIdFromUrl();
                if (receiverIdUrl) {
                    receiverIdAtual = receiverIdUrl;
                } else {
                    mostrarMensagem('error', 'Nenhuma conversa selecionada');
                    return;
                }
            }
            
            // Desabilitar input e bot√£o durante envio
            messageInput.disabled = true;
            sendButton.disabled = true;
            sendButton.innerHTML = '<div style="width:16px;height:16px;border:2px solid #fff;border-top:2px solid transparent;border-radius:50%;animation:spin 1s linear infinite;"></div>';
            
            try {
                await enviarMensagem(receiverIdAtual, mensagem);
                messageInput.value = '';
                
            } catch (error) {
                console.error('Erro no envio:', error);
                
            } finally {
                // Reabilitar input e bot√£o
                messageInput.disabled = false;
                sendButton.disabled = false;
                sendButton.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22,2 15,22 11,13 2,9"></polygon></svg>';
                messageInput.focus();
            }
        });
    }

    // Event listener para Enter no input
    const messageInput = document.getElementById('messageInput');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const form = document.getElementById('messageForm');
                if (form) form.dispatchEvent(new Event('submit'));
            }
        });
    }
});

// Fun√ß√£o para atualizar status de conex√£o
function atualizarStatusConexao(conectado) {
    const statusIndicator = document.getElementById('statusIndicator');
    if (statusIndicator) {
        if (conectado) {
            statusIndicator.classList.remove('status-disconnected');
            statusIndicator.classList.add('status-connected');
        } else {
            statusIndicator.classList.remove('status-connected');
            statusIndicator.classList.add('status-disconnected');
        }
    }
}

// Fun√ß√£o para atualizar lista de conversas periodicamente
function iniciarAtualizacaoConversas() {
    setInterval(async () => {
        try {
            await carregarConversas();
        } catch (error) {
            console.error('Erro ao atualizar conversas:', error);
        }
    }, CONVERSATIONS_REFRESH_INTERVAL);
}

// Detectar quando a p√°gina perde/ganha foco
document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
        // P√°gina perdeu foco - reduzir frequ√™ncia de polling
        if (pollingInterval) {
            clearInterval(pollingInterval);
            pollingInterval = setInterval(verificarNovasMensagens, POLLING_INTERVAL * 2);
        }
    } else {
        // P√°gina ganhou foco - restaurar frequ√™ncia normal
        if (isPollingActive) {
            iniciarPollingMensagens();
        }
    }
});

// Detectar quando a conex√£o √© perdida/restaurada
window.addEventListener('online', function() {
    console.log('Conex√£o restaurada');
    atualizarStatusConexao(true);
    if (conversaAtual) {
        iniciarPollingMensagens();
    }
});

window.addEventListener('offline', function() {
    console.log('Conex√£o perdida');
    atualizarStatusConexao(false);
    pararPollingMensagens();
});

// Inicializa√ß√£o quando a p√°gina carrega
window.addEventListener('DOMContentLoaded', async function() {
    console.log('Inicializando chat em tempo real...');
    
    // Obter informa√ß√µes do usu√°rio logado
    await obterUsuarioLogado();
    
    // Verificar se h√° receiverId na URL
    const receiverIdUrl = getReceiverIdFromUrl();
    
    if (receiverIdUrl) {
        console.log('ReceiverID encontrado na URL:', receiverIdUrl);
        receiverIdAtual = receiverIdUrl;
        
        // Mostrar painel de chat mesmo sem conversa existente
        const emptyChat = document.getElementById('emptyChat');
        const activeChat = document.getElementById('activeChat');
        const chatUserName = document.getElementById('chatUserName');
        const messagesContainer = document.getElementById('messagesContainer');
        
        if (emptyChat) emptyChat.style.display = 'none';
        if (activeChat) activeChat.style.display = 'flex';
        if (chatUserName) chatUserName.textContent = `Usu√°rio ${receiverIdUrl}`;
        if (messagesContainer) messagesContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">Nova conversa. Digite uma mensagem para come√ßar.</p>';
    }
    
    // Carregar conversas existentes
    await carregarConversas();
    
    // Iniciar atualiza√ß√£o peri√≥dica das conversas
    iniciarAtualizacaoConversas();
    
    // Definir status inicial
    atualizarStatusConexao(navigator.onLine);
    
    console.log('Chat em tempo real inicializado!');
});
    </script>
</body>
</html>