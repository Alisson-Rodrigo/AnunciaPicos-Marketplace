@page "/cadastrarProduto"

<NavBar />
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastrar Produto</title>
    <style>
        /* Reset e configurações base */
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px 0; }
        .container { max-width: 900px; margin: 40px auto; padding: 40px; background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 20px; box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.1); animation: slideUp 0.6s ease-out; }
        @* @keyframes slideUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } } *@
        .container h2 { text-align: center; color: #2d3748; margin-bottom: 40px; font-size: 32px; font-weight: 700; position: relative; }
        .container h2::after { content: ''; position: absolute; bottom: -10px; left: 50%; transform: translateX(-50%); width: 60px; height: 4px; background: linear-gradient(90deg, #667eea, #764ba2); border-radius: 2px; }
        #productForm { display: grid; grid-template-columns: 1fr 1fr; gap: 25px; }
        .form-group.full-width { grid-column: 1 / -1; }
        .form-group { position: relative; }
        .form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #2d3748; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px; }
        .form-group input[type="text"], .form-group input[type="number"], .form-group select, .form-group textarea { width: 100%; padding: 15px 20px; border: 2px solid #e2e8f0; border-radius: 12px; font-size: 16px; transition: all 0.3s ease; background: #ffffff; color: #2d3748; }
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); transform: translateY(-2px); }
        .form-group select { appearance: none; background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23667eea' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right 15px center; background-size: 20px; cursor: pointer; }
        .image-upload-section { background: #f8fafc; border-radius: 16px; padding: 30px; border: 2px dashed #cbd5e0; transition: all 0.3s ease; }
        .image-upload-section:hover { border-color: #667eea; background: #f0f4ff; }
        .upload-header { text-align: center; margin-bottom: 25px; }
        .image-placeholder { width: 80px; height: 80px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px; box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3); }
        .image-placeholder svg { width: 35px; height: 35px; color: white; }
        .upload-header h3 { color: #2d3748; margin-bottom: 8px; font-size: 18px; font-weight: 600; }
        .upload-header p { color: #718096; font-size: 14px; }
        .upload-buttons { display: flex; gap: 15px; justify-content: center; flex-wrap: wrap; margin-bottom: 25px; }
      
        input[type="file"] { display: none; }
        .image-preview-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); gap: 20px; margin-top: 25px; }
        .image-preview-item { position: relative; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); transition: all 0.3s ease; width: 100%; max-width: 200px; margin: 0 auto; }
        .image-preview-item:hover { transform: translateY(-5px); box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15); }
        .image-preview-item img { width: 100%; height: 180px; object-fit: cover; display: block; }
        .image-remove-btn { position: absolute; top: 8px; right: 8px; background: rgba(239, 68, 68, 0.9); color: white; border: none; border-radius: 50%; width: 28px; height: 28px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 14px; transition: all 0.3s ease; backdrop-filter: blur(5px); }
        .image-remove-btn:hover { background: rgba(239, 68, 68, 1); transform: scale(1.1); }
        .image-info { padding: 12px; background: #f8fafc; font-size: 12px; color: #64748b; text-align: center; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .additional-info { background: #f8fafc; border-radius: 16px; padding: 25px; border-left: 4px solid #667eea; }
        .additional-info h3 { font-size: 18px; color: #2d3748; margin-bottom: 15px; font-weight: 600; }
        .additional-info textarea { min-height: 120px; resize: vertical; }
        .submit-btn { grid-column: 1 / -1; background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 12px; padding: 18px 40px; font-size: 18px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; margin-top: 20px; box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3); text-transform: uppercase; letter-spacing: 1px; display: inline-flex; justify-content: center; align-items: center; }
        .submit-btn:hover:not(:disabled) { transform: translateY(-3px); box-shadow: 0 10px 30px rgba(16, 185, 129, 0.4); }
        .submit-btn:disabled { opacity: 0.7; cursor: not-allowed; transform: none; }
        .spinner { width: 20px; height: 20px; border: 2px solid #fff; border-bottom-color: transparent; border-radius: 50%; display: inline-block; box-sizing: border-box; animation: spin 1s linear infinite; margin-right: 8px; }
        .alert-message { grid-column: 1 / -1; text-align: center; margin-top: 15px; padding: 12px; border-radius: 8px; }
        .alert-success { color: #0f5132; background-color: #d1e7dd; border: 1px solid #badbcc; }
        .alert-danger { color: #842029; background-color: #f8d7da; border: 1px solid #f5c2c7; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Informações do Produto</h2>
        <form id="productForm">
            <div class="form-group"> <label for="productPrice">Preço do produto</label> <input type="number" step="0.01" id="productPrice" class="form-control" placeholder="R$ 29,90" required /> </div>
            <div class="form-group"> <label for="productName">Nome do produto</label> <input type="text" id="productName" class="form-control" placeholder="Digite o nome do produto" required /> </div>
            
            <div class="form-group full-width">
                <label for="productCategory">Categoria</label>
                <select id="productCategory" class="form-control" required>
                    <option value="" disabled selected>Selecione uma categoria...</option>
                    <option value="0">Outros</option>
                    <option value="1">Eletrônicos</option>
                    <option value="2">Móveis</option>
                    <option value="3">Roupas</option>
                    <option value="4">Eletrodomésticos</option>
                    <option value="5">Livros</option>
                    <option value="6">Produtos esportivos</option>
                    <option value="7">Beleza e saúde</option>
                    <option value="8">Brinquedos</option>
                    <option value="9">Automotivo</option>
                    <option value="10">Jardim e exteriores</option>
                    <option value="11">Alimentos e bebidas</option>
                </select>
            </div>
            <div class="form-group full-width"> <div class="image-upload-section"> <div class="upload-header"> <div class="image-placeholder"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"> <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect> <circle cx="8.5" cy="8.5" r="1.5"></circle> <polyline points="21 15 16 10 5 21"></polyline> </svg> </div> <h3>Imagens do Produto</h3> <p>Adicione até 10 imagens do seu produto</p> </div> <div class="upload-buttons"> <label for="productImages" class="file-upload-button"> <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14,2 14,8 20,8"/></svg> Selecionar Imagens </label> </div> <input type="file" id="productImages" multiple accept="image/*" /> <div id="imagePreview" class="image-preview-container"></div> </div> </div>
            <div class="form-group full-width additional-info"> <label for="productDescription">Informações Adicionais</label> <textarea id="productDescription" class="form-control" placeholder="Descreva as características, estado de conservação, e outras informações importantes sobre seu produto..."></textarea> </div>
            <button type="submit" class="submit-btn">Anunciar Produto</button>
            <div id="alertMessageContainer"></div>
        </form>
    </div>
    <Footer/>

    <script>
        // NENHUMA MUDANÇA É NECESSÁRIA NO JAVASCRIPT
        // ELE PERMANECE EXATAMENTE O MESMO DA VERSÃO ANTERIOR
        document.addEventListener("DOMContentLoaded", function () {
            const productForm = document.getElementById("productForm");
            const imageInput = document.getElementById("productImages");
            const imagePreviewContainer = document.getElementById("imagePreview");
            const alertContainer = document.getElementById("alertMessageContainer");
            let selectedFiles = []; 
            const MAX_FILES = 10;
            
            imageInput.addEventListener("change", function () { const newFiles = Array.from(this.files); newFiles.forEach(file => { if (selectedFiles.length < MAX_FILES && file.type.startsWith('image/')) { selectedFiles.push(file); } }); if (selectedFiles.length > MAX_FILES) { selectedFiles = selectedFiles.slice(0, MAX_FILES); showAlert('Você pode adicionar no máximo 10 imagens.', 'danger'); } updateImagePreview(); this.value = ''; });
            function updateImagePreview() { imagePreviewContainer.innerHTML = ''; selectedFiles.forEach((file, index) => { const reader = new FileReader(); reader.onload = function (e) { const imageItem = document.createElement("div"); imageItem.className = "image-preview-item"; imageItem.innerHTML = `<img src="${e.target.result}" alt="Preview de ${file.name}"><button type="button" class="image-remove-btn" data-index="${index}"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button><div class="image-info">${file.name.length > 20 ? file.name.substring(0, 17) + '...' : file.name}</div>`; imagePreviewContainer.appendChild(imageItem); }; reader.readAsDataURL(file); }); }
            imagePreviewContainer.addEventListener('click', function(e) { const removeBtn = e.target.closest('.image-remove-btn'); if (removeBtn) { const indexToRemove = parseInt(removeBtn.dataset.index, 10); selectedFiles.splice(indexToRemove, 1); updateImagePreview(); } });

            productForm.addEventListener("submit", async function (e) {
                e.preventDefault();
                const submitBtn = this.querySelector(".submit-btn");
                const originalBtnText = submitBtn.innerHTML;
                setSubmitButtonState(submitBtn, true);

                const token = localStorage.getItem('authToken');
                if (!token) {
                    showAlert('Você precisa estar logado para cadastrar um produto.', 'danger');
                    setSubmitButtonState(submitBtn, false, originalBtnText);
                    return;
                }
                if (selectedFiles.length === 0) {
                    showAlert('Por favor, adicione pelo menos uma imagem.', 'danger');
                    setSubmitButtonState(submitBtn, false, originalBtnText);
                    return;
                }

                const formData = new FormData();
                const priceValue = document.getElementById("productPrice").value;
                const formattedPrice = priceValue.replace(',', '.');

                formData.append("Name", document.getElementById("productName").value);
                formData.append("Description", document.getElementById("productDescription").value);
                formData.append("Price", formattedPrice);
                formData.append("Categories", document.getElementById("productCategory").value); // Esta linha agora pega o número correto
                
                selectedFiles.forEach(file => { formData.append("Imagens", file); });

                try {
                    const response = await fetch('https://api.anunciapicos.shop/product/register', {
                        method: 'POST',
                        body: formData,
                        headers: { 'Authorization': `Bearer ${token}` }
                    });

                    if (response.ok) {
                        showAlert('Produto cadastrado com sucesso!', 'success');
                        productForm.reset();
                        selectedFiles = [];

                        updateImagePreview();
                         setTimeout(() => {
                            window.location.href = '/'; // Redireciona para a home
                        }, 1500);
                    } else if (response.status === 401) {
                         showAlert('Sua sessão expirou ou o token é inválido. Por favor, faça login novamente.', 'danger');
                    } else {
                        const errorData = await response.json().catch(() => null);
                        let errorMessage = `Erro ao cadastrar: ${response.status} (Bad Request).`;
                        if (errorData && errorData.errors) {
                            const errorDetails = Object.values(errorData.errors).flat().join(' ');
                            errorMessage += ` Detalhes: ${errorDetails}`;
                        } else if (errorData && errorData.message) {
                            errorMessage += ` Detalhes: ${errorData.message}`;
                        }
                        showAlert(errorMessage, 'danger');
                    }
                } catch (error) {
                    showAlert(`Erro de rede: ${error.message}`, 'danger');
                } finally {
                    setSubmitButtonState(submitBtn, false, originalBtnText);
                }
            });
            function setSubmitButtonState(button, isSubmitting, originalText = 'Anunciar Produto') { if (isSubmitting) { button.disabled = true; button.innerHTML = '<span class="spinner"></span> Enviando...'; } else { button.disabled = false; button.innerHTML = originalText; } }
            function showAlert(message, type = 'danger') { const alertDiv = document.createElement('div'); alertDiv.className = `alert-message alert-${type}`; alertDiv.textContent = message; alertContainer.innerHTML = ''; alertContainer.appendChild(alertDiv); }
        });
    </script>
</body>
</html>