@page "/perfil"
<NavBar />
<body>
    <div class="container">
        <header class="header">
            <div class="header-content">
                <h1>Olá, <span id="user-name">Usuário</span></h1>
                <div class="notification-only"></div>
            </div>
        </header>

        <div class="profile-page-container">
            <!-- Menu Lateral -->
            <div class="sidebar-menu">
                <div class="profile-image-container">
                    <div class="edit-image-overlay" id="edit-image-overlay">
                        <input type="file" id="input-imagem" style="display: none;" accept="image/*" />
                    </div>
                </div>
                <div class="user-info">
                    <h3 id="sidebar-name">Nome do Usuário</h3>
                    <p id="sidebar-email">usuario@email.com</p>
                </div>
                <ul class="menu-options">
                    <li class="menu-item active" data-section="perfil" onclick="trocarSecao('perfil')">Perfil</li>
                    <li class="menu-item" data-section="editar-perfil" onclick="trocarSecao('editar-perfil')">Editar Perfil</li>
                    <li class="menu-item" data-section="meus-produtos" onclick="trocarSecao('meus-produtos')">Meus Produtos</li>
                </ul>
            </div>

            <!-- Conteúdo Principal -->
            <div class="main-content">
                <div class="content-section active" id="perfil-section">
                    <h2 class="section-title">Meu Perfil</h2>
                    <div class="profile-info-card">
                        <div class="info-row">
                            <label>Nome completo:</label>
                            <p id="info-nome-completo">-</p>
                        </div>
                        <div class="info-row">
                            <label>CPF:</label>
                            <p id="info-cpf">-</p>
                        </div>
                        <div class="info-row">
                            <label>Telefone:</label>
                            <p id="info-phone">-</p>
                        </div>
                        <div class="info-row">
                            <label>E-mail:</label>
                            <p id="info-email">-</p>
                        </div>
                    </div>
                </div>

                <div class="content-section" id="editar-perfil-section">
                    <h2 class="section-title">Editar Perfil</h2>
                    <div class="profile-form">
                        <div class="form-group">
                            <label for="nome-completo">Nome completo</label>
                            <input type="text" id="nome-completo" placeholder="Seu nome completo" />
                        </div>

                        <div class="form-group">
                            <label for="cpf">CPF</label>
                            <input type="text" id="cpf" disabled class="input-disabled" />
                        </div>

                        <div class="form-group">
                            <label for="phone">Telefone</label>
                            <input type="text" id="phone" placeholder="Seu telefone" />
                        </div>

                        <div class="form-group">
                            <label for="email-text">E-mail</label>
                            <input type="text" id="email-text" disabled class="input-disabled" />
                        </div>

                        <div class="form-group">
                            <label for="input-imagem-edicao">Nova imagem de perfil</label>
                            <div class="image-upload-container">
                                <input type="file" id="input-imagem-edicao" accept="image/*" onchange="mostrarPreviewImagem(this)" />
                                <div id="preview-text">Prévia da imagem:</div>
                                <div id="image-preview-container" class="image-preview">
                                    <img id="image-preview" src="" alt="Prévia da imagem" style="display: none;" />
                                    <div id="preview-placeholder">Selecione uma imagem para ver a prévia</div>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions">
                            <button class="save-button" onclick="salvarAlteracoes()">Salvar alterações</button>
                            <button class="cancel-button" onclick="cancelarEdicao()">Cancelar</button>
                        </div>
                    </div>
                </div>

                <div class="content-section" id="meus-produtos-section">
                    <h2 class="section-title">Meus Produtos</h2>
                    <div id="lista-produtos" class="produtos-grid"></div>
                </div>
            </div>
        </div>
    </div>
</body>
<Footer />

<style>
    /* Estilo para o container de prévia de imagem */
    .image-upload-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    #preview-text {
        font-weight: bold;
        margin-top: 15px;
        color: #333;
    }
    
    .image-preview {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        border: 2px dashed #ccc;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        background-color: #f9f9f9;
        margin: 5px 0;
    }
    
    #image-preview {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    #preview-placeholder {
        font-size: 14px;
        color: #888;
        text-align: center;
        padding: 10px;
    }
    
    /* Estilos para a tabela de produtos */
    .produtos-table {
        width: 100%;
        border-collapse: collapse;
        font-family: Arial, sans-serif;
    }
    
    .produtos-table th {
        background-color: #f9f9f9;
        color: #555;
        font-weight: 600;
        text-align: left;
        padding: 15px;
        border-bottom: 1px solid #ddd;
    }
    
    .produtos-table td {
        padding: 15px;
        border-bottom: 1px solid #eee;
        vertical-align: middle;
    }
    
    .produto-info-container {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .produto-thumb {
        width: 60px;
        height: 60px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .produto-thumb img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }
    
    .produto-sem-imagem {
        width: 60px;
        height: 60px;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .produto-detalhes h4 {
        margin: 0 0 5px 0;
        font-size: 14px;
    }
    
    .produto-desc {
        margin: 0;
        font-size: 12px;
        color: #777;
    }
    
    .preco-col {
        font-weight: bold;
        color: #333;
    }
    
    .botoes-acao {
        display: flex;
        gap: 8px;
    }
    
    .btn-editar {
        background-color: #f59f42;
        color: white;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        font-weight: bold;
        font-size: 12px;
        border-radius: 4px;
    }
    
    .btn-deletar {
        background-color: white;
        color: #888;
        border: 1px solid #ddd;
        padding: 8px;
        cursor: pointer;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .btn-editar:hover {
        background-color: #e67e22;
    }
    
    .btn-deletar:hover {
        background-color: #f5f5f5;
    }
</style>

<script>
let dadosUsuario = {};
let produtosDoUsuario = [];

document.addEventListener("DOMContentLoaded", function() {
    carregarPerfil();
    
    // Adicionar listener para o input de imagem na edição de perfil
    const inputImagem = document.getElementById("input-imagem-edicao");
    if (inputImagem) {
        inputImagem.addEventListener("change", function() {
            mostrarPreviewImagem(this);
        });
    }
});

async function carregarPerfil() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get("token");

    if (!token) return;

    try {
        const payload = decodeJwt(token);
        const response = await fetch("https://api.anunciapicos.shop/profile/myprofile", {
            method: "GET",
            headers: { "Authorization": `Bearer ${token}` }
        });

        if (!response.ok) throw new Error(`Erro HTTP: ${response.status}`);
        const data = await response.json();
        dadosUsuario = data;
        produtosDoUsuario = data.products || [];

        atualizarDadosInterface(data);
        carregarProdutos();

    } catch (error) {
        console.error("Erro ao carregar perfil:", error);
    }
}

function atualizarDadosInterface(data) {
    document.getElementById("user-name").textContent = data.name || "Usuário";
    document.getElementById("sidebar-name").textContent = data.name;
    document.getElementById("sidebar-email").textContent = data.email;
    document.getElementById("info-nome-completo").textContent = data.name;
    document.getElementById("info-cpf").textContent = data.cpf;
    document.getElementById("info-phone").textContent = data.phone;
    document.getElementById("info-email").textContent = data.email;
    document.getElementById("nome-completo").value = data.name;
    document.getElementById("cpf").value = data.cpf;
    document.getElementById("phone").value = data.phone;
    document.getElementById("email-text").value = data.email;
    userId = data.id;
    if (data.imageProfile) {
        const container = document.querySelector(".profile-image-container");
        container.innerHTML = ""; // Limpa a imagem antiga

        const img = document.createElement("img");
        img.src = data.imageProfile;
        img.alt = "Imagem de perfil";
        Object.assign(img.style, {
            width: "100%", height: "100%",
            borderRadius: "50%", objectFit: "cover",
            position: "absolute", top: "0", left: "0"
        });
        container.appendChild(img);  // Adiciona a imagem

        const overlay = document.getElementById("edit-image-overlay");
        if (overlay) { // Verifica se o overlay existe
            // Remove o overlay anterior, se houver
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
            container.appendChild(overlay);  // Adiciona o overlay novamente
        }
    }
    
    // Resetar a prévia da imagem ao carregar o perfil
    resetarPreviewImagem();
}

// Função para mostrar prévia da imagem selecionada
function mostrarPreviewImagem(input) {
    const previewImg = document.getElementById("image-preview");
    const placeholder = document.getElementById("preview-placeholder");
    
    if (input.files && input.files[0]) {
        const reader = new FileReader();
        
        reader.onload = function(e) {
            previewImg.src = e.target.result;
            previewImg.style.display = "block";
            if (placeholder) placeholder.style.display = "none";
            
            // Garantir que o container de preview fique visível
            const previewContainer = document.getElementById("image-preview-container");
            if (previewContainer) {
                previewContainer.style.display = "flex";
            }
            
            // Adicionar um log para debug
            console.log("Prévia da imagem atualizada:", e.target.result.substring(0, 50) + "...");
        };
        
        reader.readAsDataURL(input.files[0]);
    } else {
        resetarPreviewImagem();
    }
}

// Função para resetar a prévia da imagem
function resetarPreviewImagem() {
    const previewImg = document.getElementById("image-preview");
    const placeholder = document.getElementById("preview-placeholder");
    
    if (previewImg) {
        previewImg.src = "";
        previewImg.style.display = "none";
    }
    
    if (placeholder) {
        placeholder.style.display = "block";
    }
    
    // Adicionar um log para debug
    console.log("Preview da imagem resetado");
}

async function carregarProdutos() {
    const lista = document.getElementById("lista-produtos");
    lista.innerHTML = "";

    // Recuperando o token JWT do localStorage ou da URL
    const token = localStorage.getItem("token") || new URLSearchParams(window.location.search).get("token");

    if (!token) {
        console.error("Token não encontrado.");
        return;
    }



    try {
        // Realizando a requisição para obter os produtos
        const response = await fetch(`https://api.anunciapicos.shop/product/search/products?userId=${userId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        // Verificar o status da resposta da API
        if (!response.ok) {
            console.error("Erro na resposta da API:", response.status);
            lista.innerHTML = "<p class='error'>Erro ao carregar produtos. Tente novamente mais tarde.</p>";
            return;
        }

        const data = await response.json();
        
        // Log para verificar a estrutura de dados recebida
        console.log("Resposta da API:", data);

        // Verifique se a resposta contém itens de produtos ou dados
        const produtos = data.items || [];

        if (produtos.length === 0) {
            console.log("Nenhum produto encontrado para o usuário com ID:", userId);
            lista.innerHTML = "<p class='no-products'>Você ainda não tem produtos cadastrados.</p>";
            return;
        }

        // Cria a tabela de produtos
        const table = document.createElement("table");
        table.classList.add("produtos-table");
        
        // Cabeçalho da tabela
        const thead = document.createElement("thead");
        thead.innerHTML = `
            <tr>
                <th>PRODUTOS</th>
                <th>PREÇO</th>
                <th>AÇÃO</th>
            </tr>
        `;
        table.appendChild(thead);
        
        // Corpo da tabela
        const tbody = document.createElement("tbody");
        produtos.forEach(produto => {
            const imagem = produto.imageUrl?.[0] || "";
            const tr = document.createElement("tr");
            
            // Coluna de produto com imagem e nome
            const tdProduto = document.createElement("td");
            tdProduto.classList.add("produto-col");
            tdProduto.innerHTML = `
                <div class="produto-info-container">
                    ${imagem ? `<div class="produto-thumb"><img src="${imagem}" alt="${produto.name}" /></div>` : '<div class="produto-sem-imagem"></div>'}
                    <div class="produto-detalhes">
                        <h4>${produto.name}</h4>
                    </div>
                </div>
            `;
            
            // Coluna de preço
            const tdPreco = document.createElement("td");
            tdPreco.classList.add("preco-col");
            tdPreco.innerHTML = `R$${produto.price.toFixed(2)}`;
            
            // Coluna de ações
            const tdAcoes = document.createElement("td");
            tdAcoes.classList.add("acoes-col");
            tdAcoes.innerHTML = `
                <div class="botoes-acao">
                    <button class="btn-editar" onclick="editarProduto(${produto.id})">EDITAR</button>
                    <button class="btn-deletar" onclick="deletarProduto(${produto.id})"><i class="fas fa-trash-alt"></i></button>
                </div>
            `;
            
            // Adiciona as colunas à linha
            tr.appendChild(tdProduto);
            tr.appendChild(tdPreco);
            tr.appendChild(tdAcoes);
            
            // Adiciona a linha ao corpo da tabela
            tbody.appendChild(tr);
        });
        
        table.appendChild(tbody);
        lista.appendChild(table);
    } catch (error) {
        console.error("Erro ao carregar produtos:", error);
        lista.innerHTML = "<p class='error'>Erro ao carregar produtos. Tente novamente mais tarde.</p>";
    }
}

function trocarSecao(secaoId) {
    document.querySelectorAll('.menu-item').forEach(i => i.classList.remove('active'));
    document.querySelector(`.menu-item[data-section="${secaoId}"]`).classList.add('active');
    document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
    document.getElementById(`${secaoId}-section`).classList.add('active');
}

function selecionarImagem() {
    document.getElementById("input-imagem-edicao").click();
}

function cancelarEdicao() {
    atualizarDadosInterface(dadosUsuario);
    trocarSecao('perfil');
}

async function salvarAlteracoes() {
    const nome = document.getElementById("nome-completo").value;
    const telefone = document.getElementById("phone").value;
    const email = document.getElementById("email-text").value;

    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get("token");

    const formData = new FormData();
    formData.append("name", nome);
    formData.append("email", email);
    formData.append("phone", telefone);

    const imagemInput = document.getElementById("input-imagem-edicao");
    if (imagemInput && imagemInput.files.length > 0) {
        const imagemFile = imagemInput.files[0];
        formData.append("imageProfile", imagemFile);
    }

    try {
        const response = await fetch("https://api.anunciapicos.shop/profile/update-profile", {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            },
            body: formData
        });

        if (!response.ok) throw new Error(`Erro HTTP: ${response.status}`);

        alert("Alterações salvas com sucesso!");
        await carregarPerfil();
        trocarSecao('perfil');

    } catch (error) {
        console.error("Erro detalhado:", error);
        alert("Falha ao salvar alterações: " + error.message);
    }
}

function decodeJwt(token) {
    const payload = token.split('.')[1];
    const decoded = atob(payload.replace(/-/g, '+').replace(/_/g, '/'));
    return JSON.parse(decoded);
}
</script>